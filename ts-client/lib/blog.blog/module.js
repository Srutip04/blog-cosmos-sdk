// Generated by Ignite ignite.com/cli
import { SigningStargateClient } from "@cosmjs/stargate";
import { Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { Api } from "./rest";
import { MsgCreatePostResponse } from "./types/blog/blog/tx";
import { MsgUpdateParamsResponse } from "./types/blog/blog/tx";
import { MsgUpdateParams } from "./types/blog/blog/tx";
import { Params } from "./types/blog/blog/params";
import { QueryParamsRequest } from "./types/blog/blog/query";
import { QueryShowPostRequest } from "./types/blog/blog/query";
import { MsgDeletePost } from "./types/blog/blog/tx";
import { Post } from "./types/blog/blog/post";
import { MsgUpdatePost } from "./types/blog/blog/tx";
import { GenesisState } from "./types/blog/blog/genesis";
import { MsgCreatePost } from "./types/blog/blog/tx";
import { QueryListPostRequest } from "./types/blog/blog/query";
import { QueryListPostResponse } from "./types/blog/blog/query";
import { MsgUpdatePostResponse } from "./types/blog/blog/tx";
import { MsgDeletePostResponse } from "./types/blog/blog/tx";
import { QueryParamsResponse } from "./types/blog/blog/query";
import { QueryShowPostResponse } from "./types/blog/blog/query";
export { MsgCreatePostResponse, MsgUpdateParamsResponse, MsgUpdateParams, Params, QueryParamsRequest, QueryShowPostRequest, MsgDeletePost, Post, MsgUpdatePost, GenesisState, MsgCreatePost, QueryListPostRequest, QueryListPostResponse, MsgUpdatePostResponse, MsgDeletePostResponse, QueryParamsResponse, QueryShowPostResponse };
export const registry = new Registry(msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
export const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendMsgCreatePostResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreatePostResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgCreatePostResponse({ value: MsgCreatePostResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreatePostResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.params({ value: Params.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryShowPostRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryShowPostRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryShowPostRequest({ value: QueryShowPostRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryShowPostRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgDeletePost({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgDeletePost: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgDeletePost({ value: MsgDeletePost.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgDeletePost: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendPost({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendPost: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.post({ value: Post.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendPost: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdatePost({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdatePost: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgUpdatePost({ value: MsgUpdatePost.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdatePost: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.genesisState({ value: GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreatePost({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreatePost: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgCreatePost({ value: MsgCreatePost.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreatePost: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryListPostRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryListPostRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryListPostRequest({ value: QueryListPostRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryListPostRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryListPostResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryListPostResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryListPostResponse({ value: QueryListPostResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryListPostResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdatePostResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdatePostResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgUpdatePostResponse({ value: MsgUpdatePostResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdatePostResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgDeletePostResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgDeletePostResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgDeletePostResponse({ value: MsgDeletePostResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgDeletePostResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryShowPostResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryShowPostResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.queryShowPostResponse({ value: QueryShowPostResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryShowPostResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        msgCreatePostResponse({ value }) {
            try {
                return { typeUrl: "/blog.blog.MsgCreatePostResponse", value: MsgCreatePostResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreatePostResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateParamsResponse({ value }) {
            try {
                return { typeUrl: "/blog.blog.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateParams({ value }) {
            try {
                return { typeUrl: "/blog.blog.MsgUpdateParams", value: MsgUpdateParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message);
            }
        },
        params({ value }) {
            try {
                return { typeUrl: "/blog.blog.Params", value: Params.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Params: Could not create message: ' + e.message);
            }
        },
        queryParamsRequest({ value }) {
            try {
                return { typeUrl: "/blog.blog.QueryParamsRequest", value: QueryParamsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message);
            }
        },
        queryShowPostRequest({ value }) {
            try {
                return { typeUrl: "/blog.blog.QueryShowPostRequest", value: QueryShowPostRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryShowPostRequest: Could not create message: ' + e.message);
            }
        },
        msgDeletePost({ value }) {
            try {
                return { typeUrl: "/blog.blog.MsgDeletePost", value: MsgDeletePost.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgDeletePost: Could not create message: ' + e.message);
            }
        },
        post({ value }) {
            try {
                return { typeUrl: "/blog.blog.Post", value: Post.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Post: Could not create message: ' + e.message);
            }
        },
        msgUpdatePost({ value }) {
            try {
                return { typeUrl: "/blog.blog.MsgUpdatePost", value: MsgUpdatePost.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdatePost: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/blog.blog.GenesisState", value: GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        msgCreatePost({ value }) {
            try {
                return { typeUrl: "/blog.blog.MsgCreatePost", value: MsgCreatePost.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreatePost: Could not create message: ' + e.message);
            }
        },
        queryListPostRequest({ value }) {
            try {
                return { typeUrl: "/blog.blog.QueryListPostRequest", value: QueryListPostRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryListPostRequest: Could not create message: ' + e.message);
            }
        },
        queryListPostResponse({ value }) {
            try {
                return { typeUrl: "/blog.blog.QueryListPostResponse", value: QueryListPostResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryListPostResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdatePostResponse({ value }) {
            try {
                return { typeUrl: "/blog.blog.MsgUpdatePostResponse", value: MsgUpdatePostResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdatePostResponse: Could not create message: ' + e.message);
            }
        },
        msgDeletePostResponse({ value }) {
            try {
                return { typeUrl: "/blog.blog.MsgDeletePostResponse", value: MsgDeletePostResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgDeletePostResponse: Could not create message: ' + e.message);
            }
        },
        queryParamsResponse({ value }) {
            try {
                return { typeUrl: "/blog.blog.QueryParamsResponse", value: QueryParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message);
            }
        },
        queryShowPostResponse({ value }) {
            try {
                return { typeUrl: "/blog.blog.QueryShowPostResponse", value: QueryShowPostResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryShowPostResponse: Could not create message: ' + e.message);
            }
        },
    };
};
export const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new Api({ baseURL: addr });
};
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = queryClient({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = txClient({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            BlogBlog: new SDKModule(test)
        },
        registry: msgTypes
    };
};
export default IgntModule;
