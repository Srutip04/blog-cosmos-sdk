// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgCreatePostResponse } from "./types/blog/blog/tx";
import { MsgUpdateParamsResponse } from "./types/blog/blog/tx";
import { MsgUpdateParams } from "./types/blog/blog/tx";
import { Params } from "./types/blog/blog/params";
import { QueryParamsRequest } from "./types/blog/blog/query";
import { QueryShowPostRequest } from "./types/blog/blog/query";
import { MsgDeletePost } from "./types/blog/blog/tx";
import { Post } from "./types/blog/blog/post";
import { MsgUpdatePost } from "./types/blog/blog/tx";
import { GenesisState } from "./types/blog/blog/genesis";
import { MsgCreatePost } from "./types/blog/blog/tx";
import { QueryListPostRequest } from "./types/blog/blog/query";
import { QueryListPostResponse } from "./types/blog/blog/query";
import { MsgUpdatePostResponse } from "./types/blog/blog/tx";
import { MsgDeletePostResponse } from "./types/blog/blog/tx";
import { QueryParamsResponse } from "./types/blog/blog/query";
import { QueryShowPostResponse } from "./types/blog/blog/query";


export { MsgCreatePostResponse, MsgUpdateParamsResponse, MsgUpdateParams, Params, QueryParamsRequest, QueryShowPostRequest, MsgDeletePost, Post, MsgUpdatePost, GenesisState, MsgCreatePost, QueryListPostRequest, QueryListPostResponse, MsgUpdatePostResponse, MsgDeletePostResponse, QueryParamsResponse, QueryShowPostResponse };

type sendMsgCreatePostResponseParams = {
  value: MsgCreatePostResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendParamsParams = {
  value: Params,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsRequestParams = {
  value: QueryParamsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryShowPostRequestParams = {
  value: QueryShowPostRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeletePostParams = {
  value: MsgDeletePost,
  fee?: StdFee,
  memo?: string
};

type sendPostParams = {
  value: Post,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdatePostParams = {
  value: MsgUpdatePost,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreatePostParams = {
  value: MsgCreatePost,
  fee?: StdFee,
  memo?: string
};

type sendQueryListPostRequestParams = {
  value: QueryListPostRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryListPostResponseParams = {
  value: QueryListPostResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdatePostResponseParams = {
  value: MsgUpdatePostResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeletePostResponseParams = {
  value: MsgDeletePostResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsResponseParams = {
  value: QueryParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryShowPostResponseParams = {
  value: QueryShowPostResponse,
  fee?: StdFee,
  memo?: string
};


type msgCreatePostResponseParams = {
  value: MsgCreatePostResponse,
};

type msgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type paramsParams = {
  value: Params,
};

type queryParamsRequestParams = {
  value: QueryParamsRequest,
};

type queryShowPostRequestParams = {
  value: QueryShowPostRequest,
};

type msgDeletePostParams = {
  value: MsgDeletePost,
};

type postParams = {
  value: Post,
};

type msgUpdatePostParams = {
  value: MsgUpdatePost,
};

type genesisStateParams = {
  value: GenesisState,
};

type msgCreatePostParams = {
  value: MsgCreatePost,
};

type queryListPostRequestParams = {
  value: QueryListPostRequest,
};

type queryListPostResponseParams = {
  value: QueryListPostResponse,
};

type msgUpdatePostResponseParams = {
  value: MsgUpdatePostResponse,
};

type msgDeletePostResponseParams = {
  value: MsgDeletePostResponse,
};

type queryParamsResponseParams = {
  value: QueryParamsResponse,
};

type queryShowPostResponseParams = {
  value: QueryShowPostResponse,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgCreatePostResponse({ value, fee, memo }: sendMsgCreatePostResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreatePostResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreatePostResponse({ value: MsgCreatePostResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreatePostResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParamsResponse({ value, fee, memo }: sendMsgUpdateParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendParams({ value, fee, memo }: sendParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.params({ value: Params.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsRequest({ value, fee, memo }: sendQueryParamsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryShowPostRequest({ value, fee, memo }: sendQueryShowPostRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryShowPostRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryShowPostRequest({ value: QueryShowPostRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryShowPostRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeletePost({ value, fee, memo }: sendMsgDeletePostParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeletePost: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeletePost({ value: MsgDeletePost.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeletePost: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendPost({ value, fee, memo }: sendPostParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendPost: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.post({ value: Post.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendPost: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdatePost({ value, fee, memo }: sendMsgUpdatePostParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdatePost: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdatePost({ value: MsgUpdatePost.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdatePost: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreatePost({ value, fee, memo }: sendMsgCreatePostParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreatePost: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreatePost({ value: MsgCreatePost.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreatePost: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryListPostRequest({ value, fee, memo }: sendQueryListPostRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryListPostRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryListPostRequest({ value: QueryListPostRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryListPostRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryListPostResponse({ value, fee, memo }: sendQueryListPostResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryListPostResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryListPostResponse({ value: QueryListPostResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryListPostResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdatePostResponse({ value, fee, memo }: sendMsgUpdatePostResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdatePostResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdatePostResponse({ value: MsgUpdatePostResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdatePostResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeletePostResponse({ value, fee, memo }: sendMsgDeletePostResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeletePostResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeletePostResponse({ value: MsgDeletePostResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeletePostResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsResponse({ value, fee, memo }: sendQueryParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryShowPostResponse({ value, fee, memo }: sendQueryShowPostResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryShowPostResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryShowPostResponse({ value: QueryShowPostResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryShowPostResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgCreatePostResponse({ value }: msgCreatePostResponseParams): EncodeObject {
			try {
				return { typeUrl: "/blog.blog.MsgCreatePostResponse", value: MsgCreatePostResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreatePostResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParamsResponse({ value }: msgUpdateParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/blog.blog.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/blog.blog.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		params({ value }: paramsParams): EncodeObject {
			try {
				return { typeUrl: "/blog.blog.Params", value: Params.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Params: Could not create message: ' + e.message)
			}
		},
		
		queryParamsRequest({ value }: queryParamsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/blog.blog.QueryParamsRequest", value: QueryParamsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryShowPostRequest({ value }: queryShowPostRequestParams): EncodeObject {
			try {
				return { typeUrl: "/blog.blog.QueryShowPostRequest", value: QueryShowPostRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryShowPostRequest: Could not create message: ' + e.message)
			}
		},
		
		msgDeletePost({ value }: msgDeletePostParams): EncodeObject {
			try {
				return { typeUrl: "/blog.blog.MsgDeletePost", value: MsgDeletePost.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeletePost: Could not create message: ' + e.message)
			}
		},
		
		post({ value }: postParams): EncodeObject {
			try {
				return { typeUrl: "/blog.blog.Post", value: Post.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Post: Could not create message: ' + e.message)
			}
		},
		
		msgUpdatePost({ value }: msgUpdatePostParams): EncodeObject {
			try {
				return { typeUrl: "/blog.blog.MsgUpdatePost", value: MsgUpdatePost.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdatePost: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/blog.blog.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		msgCreatePost({ value }: msgCreatePostParams): EncodeObject {
			try {
				return { typeUrl: "/blog.blog.MsgCreatePost", value: MsgCreatePost.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreatePost: Could not create message: ' + e.message)
			}
		},
		
		queryListPostRequest({ value }: queryListPostRequestParams): EncodeObject {
			try {
				return { typeUrl: "/blog.blog.QueryListPostRequest", value: QueryListPostRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryListPostRequest: Could not create message: ' + e.message)
			}
		},
		
		queryListPostResponse({ value }: queryListPostResponseParams): EncodeObject {
			try {
				return { typeUrl: "/blog.blog.QueryListPostResponse", value: QueryListPostResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryListPostResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdatePostResponse({ value }: msgUpdatePostResponseParams): EncodeObject {
			try {
				return { typeUrl: "/blog.blog.MsgUpdatePostResponse", value: MsgUpdatePostResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdatePostResponse: Could not create message: ' + e.message)
			}
		},
		
		msgDeletePostResponse({ value }: msgDeletePostResponseParams): EncodeObject {
			try {
				return { typeUrl: "/blog.blog.MsgDeletePostResponse", value: MsgDeletePostResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeletePostResponse: Could not create message: ' + e.message)
			}
		},
		
		queryParamsResponse({ value }: queryParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/blog.blog.QueryParamsResponse", value: QueryParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryShowPostResponse({ value }: queryShowPostResponseParams): EncodeObject {
			try {
				return { typeUrl: "/blog.blog.QueryShowPostResponse", value: QueryShowPostResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryShowPostResponse: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			BlogBlog: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;